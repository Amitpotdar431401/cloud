                            Assignment 6
Create a python program that takes 2 numbers from the user and displays addition and multiplication result. Now create an image of this program. Run the container from this image and display the results.

# Step 1: Create the calc.py file

# calc.py

def main():
    print("Enter two numbers:")
    try:
        num1 = float(input("Number 1: "))
        num2 = float(input("Number 2: "))
        addition = num1 + num2
        multiplication = num1 * num2
        print(f"Addition: {addition}")
        print(f"Multiplication: {multiplication}")
    except ValueError:
        print("Please enter valid numbers.")

if __name__ == "__main__":
    main()


# Step 2: Create the Dockerfile
cat > Dockerfile << 'EOF'
# Dockerfile

# Use Python base image
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script to the container
COPY calc.py /app/calc.py

# Set the command to run the script
CMD ["python", "calc.py"]
EOF

# Step 3: Build the Docker Image
docker build -t calc-app .

# Step 4: Run the Docker Container
docker run -it calc-app

----------------------------------------------------------------------------------------------------
Q2  Create a directory. Create an index.html file. Create a image using httpd image. Copy index.html inside the container. Run the container and map port 8200 using your image and display the webpage is displayed.

# Step 1: Create directory and index.html
mkdir website
cd website
cat > index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Webpage</title>
</head>
<body>
    <h1>Welcome to My Webpage!</h1>
    <p>This is a simple webpage hosted in a Docker container using the httpd image.</p>
</body>
</html>
EOF

# Step 2: Create Dockerfile
cat > Dockerfile << 'EOF'
# Use the official httpd image
FROM httpd:latest

# Copy the index.html to the container's document root
COPY index.html /usr/local/apache2/htdocs/
EOF

# Step 3: Build the Docker image
docker build -t my-httpd-image .

# Step 4: Run the container
docker run -d -p 8200:80 --name my-httpd-container my-httpd-image

# Step 5: Test the Webpage
# Open a web browser and go to http://localhost:8200

--------------------------------------------------------------------------------------

Q3  Create a image of the test.py file. Create a network by name app2. Create a MYSQL container and connect it to this network. Now create a container of test.py application and connect it to the same network and display that the database is created.


# calc.py

def main():
    print("Enter two numbers:")
    try:
        num1 = float(input("Number 1: "))
        num2 = float(input("Number 2: "))
        addition = num1 + num2
        multiplication = num1 * num2
        print(f"Addition: {addition}")
        print(f"Multiplication: {multiplication}")
    except ValueError:
        print("Please enter valid numbers.")

if __name__ == "__main__":
    main()
EOF

# Step 2: Create the Dockerfile
********************************'
# Dockerfile

# Use Python base image
FROM python:3.9-slim

# Set the working directory inside the container
WORKDIR /app

# Copy the Python script to the container
COPY calc.py /app/calc.py

# Set the command to run the script
CMD ["python", "calc.py"]
EOF
****************************
# Step 3: Build the Docker Image
docker build -t calc-app .

# Step 4: Run the Docker Container
docker run -it calc-app

---------------------------------------------------------------------------------------

Q4 Create a docker compose file to start 4 containers using httpd image. Map ports 5000, 6000, 7000 and 8000. Port 8000 website should display “Welcome to ACTS”. Port 5000 should display “Welcome to HPCSA”. Port 6000 should display “Welcome to DITISS” and port 7000 should display “Welcome to DAI”. Use docker-compose command.

#!/bin/bash

# Step 1: Create the directory for the project
mkdir httpd_project && cd httpd_project

# Step 2: Create the directories for each container's content
mkdir -p web5000 web6000 web7000 web8000

# Step 3: Create index.html for each container
echo "<h1>Welcome to HPCSA</h1>" > web5000/index.html
echo "<h1>Welcome to DITISS</h1>" > web6000/index.html
echo "<h1>Welcome to DAI</h1>" > web7000/index.html
echo "<h1>Welcome to ACTS</h1>" > web8000/index.html

# Step 4: Create the docker-compose.yml file
cat > docker-compose.yml << 'EOF'
version: "3.9"

services:
  web5000:
    image: httpd:latest
    container_name: web5000
    ports:
      - "5000:80"
    volumes:
      - ./web5000:/usr/local/apache2/htdocs/

  web6000:
    image: httpd:latest
    container_name: web6000
    ports:
      - "6000:80"
    volumes:
      - ./web6000:/usr/local/apache2/htdocs/

  web7000:
    image: httpd:latest
    container_name: web7000
    ports:
      - "7000:80"
    volumes:
      - ./web7000:/usr/local/apache2/htdocs/

  web8000:
    image: httpd:latest
    container_name: web8000
    ports:
      - "8000:80"
    volumes:
      - ./web8000:/usr/local/apache2/htdocs/
EOF

# Step 5: Start the containers using Docker Compose
docker-compose up -d



